{"version":3,"sources":["components/Amount.js","components/buttons/RemoveClientBtn.js","components/Client.js","components/ClientList.js","clipboard.svg","clipboardDark.svg","components/Result.js","components/buttons/ResetBtn.js","components/buttons/AddClientBtn.js","App.js","reportWebVitals.js","index.js"],"names":["Amount","amount","setAmount","className","onChange","e","amountNum","target","value","match","join","error","type","RemoveClientBtn","clientObject","setClientObject","id","onClick","preventDefault","componentId","parseFloat","newA","filter","client","Client","length","prev","findIndex","name","pubShare","syncRate","ClientList","map","i","Result","npsResult","rounded","convertAmount","copyFade","setCopyFade","darkMode","convertedAmount","indexOf","toLocaleString","src","clipboardDark","clipboard","alt","setTimeout","clientArray","rateArray","clientString","rateString","navigator","writeText","ResetBtn","setNpsResult","Date","valueOf","AddClientBtn","App","useState","setDarkMode","num","numConv","Math","round","Number","EPSILON","a","removeC","replaceAll","useEffect","reducer","accumulator","curr","shareTotal","reduce","rateCheck","every","nps","npsToLocaleString","document","body","style","backgroundColor","querySelector","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.62411384.chunk.js","sourcesContent":["import React from \"react\";\n\n//the amount component is responsible for aquiring the total licensed amount\n\nexport function Amount({ amount, setAmount }) {\n  const amountHandler = (e) => {\n    try {\n      let amountNum = e.target.value.match(/[0-9]|,|\\./g).join(\"\");\n      setAmount(amountNum);\n    } catch (error) {\n      setAmount(\"\");\n    }\n  };\n\n  return (\n    <div className=\"amount\">\n      <p> Amount: $ </p>{\" \"}\n      <input\n        onChange={amountHandler}\n        type=\"text\"\n        value={amount ? amount : \"\"}\n        className=\"input mediumInput\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\n\n//rendered within the 'Client' component, and removes client from the clientObject state array when clicked\n\nexport function RemoveClientBtn({ clientObject, setClientObject, id }) {\n  const onClickHandler = (e) => {\n    e.preventDefault();\n    const componentId = parseFloat(e.target.id);\n    let newA = clientObject.filter((client) => client.id !== componentId);\n    setClientObject(newA);\n  };\n\n  return (\n    <span onClick={onClickHandler} id={id} className=\"close\">\n      &times;\n    </span>\n  );\n}\n","import React from \"react\";\nimport { RemoveClientBtn } from \"./buttons/RemoveClientBtn\";\n\n//the client component can be rendered multiple times, and updates clientObject state for 'name,' 'pubShare,' and 'syncRate'\n\nexport function Client({ clientObject, setClientObject, id }) {\n  const nameHandler = (e) => {\n    setClientObject(\n      (prev) => [...prev],\n      (clientObject[clientObject.findIndex((client) => client.id === id)].name =\n        e.target.value)\n    );\n  };\n\n  const pubShareHandler = (e) => {\n    setClientObject(\n      (prev) => [...prev],\n      (clientObject[\n        clientObject.findIndex((client) => client.id === id)\n      ].pubShare = e.target.value / 100)\n    );\n  };\n\n  const syncRateHandler = (e) => {\n    setClientObject(\n      (prev) => [...prev],\n      (clientObject[\n        clientObject.findIndex((client) => client.id === id)\n      ].syncRate = e.target.value / 100)\n    );\n  };\n\n  return (\n    <div className=\"client\">\n      {clientObject.length === 1 ? (\n        \"\"\n      ) : (\n        <RemoveClientBtn\n          clientObject={clientObject}\n          setClientObject={setClientObject}\n          id={id}\n        />\n      )}\n      <div className=\"flexGroup spaceBottom\">\n        <p> Client Name: </p>{\" \"}\n        <input\n          onChange={nameHandler}\n          type=\"text\"\n          id={id}\n          className=\"input longInput\"\n        />\n      </div>{\" \"}\n      <div className=\"flexGroup\">\n        <div className=\"flexGroup\">\n          <p> Share: </p>{\" \"}\n          <input\n            onChange={pubShareHandler}\n            className=\"input shortInput\"\n            type=\"number\"\n          />\n          <p> % </p>{\" \"}\n        </div>{\" \"}\n        <div className=\"flexGroup \">\n          <p className=\"leftMargin\"> Sync Rate: </p>{\" \"}\n          <input\n            onChange={syncRateHandler}\n            className=\"input shortInput\"\n            type=\"number\"\n          />\n          <p> % </p>{\" \"}\n        </div>{\" \"}\n      </div>{\" \"}\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Client } from \"./Client\";\n\n//container for client components, which renders a list of all clients in the 'clientObject' state array\n\nexport function ClientList({ clientObject, setClientObject }) {\n  return (\n    <div>\n      <ul>\n        {clientObject.map((i) => (\n          <Client\n            key={i.id}\n            id={i.id}\n            clientObject={clientObject}\n            setClientObject={setClientObject}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/clipboard.765bca30.svg\";","export default __webpack_public_path__ + \"static/media/clipboardDark.6734aad3.svg\";","import React from \"react\";\nimport clipboard from \"../clipboard.svg\";\nimport clipboardDark from \"../clipboardDark.svg\";\n\n//renders each client name, the rate (i.e. 'working out') and the NPS\n\nexport function Result({\n  npsResult,\n  clientObject,\n  amount,\n  rounded,\n  convertAmount,\n  copyFade,\n  setCopyFade,\n  darkMode,\n}) {\n  //props\n  const convertedAmount = amount === \"\" ? 0 : convertAmount(amount);\n\n  const handleResultCopy = () => {\n    //sets state to fade out copied text\n    setCopyFade(\"copiedFade\");\n    //resets copyFade state\n    setTimeout(() => {\n      setCopyFade(\"\");\n    }, 1500);\n    // add client names to new array\n    const clientArray = clientObject.map((i) => {\n      if (clientObject.indexOf(i) === 0) {\n        return i.name;\n      } else {\n        return ` / ${i.name}`;\n      }\n    });\n    // add rate workings to new array\n    const rateArray = clientObject.map((i) => {\n      if (clientObject.indexOf(i) === 0) {\n        return `($${rounded(\n          convertedAmount * i.pubShare\n        ).toLocaleString()} less ${rounded(i.syncRate * 100)}%)`;\n      } else {\n        return ` + ($${rounded(\n          convertedAmount * i.pubShare\n        ).toLocaleString()} less ${rounded(i.syncRate * 100)}%)`;\n      }\n    });\n    //convert both arrays to strings\n    const clientString = clientArray.join(\"\");\n    const rateString = rateArray.join(\"\");\n    //copy result to clipboard\n    return navigator.clipboard.writeText(\n      `Client(s): ${clientString}\\nRate: ${rateString}\\nNPS = $${npsResult}`\n    );\n  };\n\n  return (\n    <div className=\"result\">\n      <p>\n        Client(s):{\" \"}\n        {clientObject.map((i) => {\n          if (clientObject.indexOf(i) === 0) {\n            return i.name;\n          } else {\n            return ` / ${i.name}`;\n          }\n        })}\n      </p>\n      <p>\n        Rate:{\" \"}\n        {clientObject.map((i) => {\n          if (clientObject.indexOf(i) === 0) {\n            return `($${rounded(\n              convertedAmount * i.pubShare\n            ).toLocaleString()} less ${rounded(i.syncRate * 100)}%)`;\n          } else {\n            return ` + ($${rounded(\n              convertedAmount * i.pubShare\n            ).toLocaleString()} less ${rounded(i.syncRate * 100)}%)`;\n          }\n        })}{\" \"}\n      </p>\n      <p className={npsResult !== \"\" ? \"npsResult\" : \"\"}>\n        NPS = {npsResult === \"\" ? npsResult : `$${npsResult}`}\n      </p>\n      <img\n        src={darkMode ? clipboardDark : clipboard}\n        alt=\"Clipboard\"\n        className=\"clip\"\n        onClick={handleResultCopy}\n      />\n      <p className={`copied ${copyFade}`}>copied</p>\n    </div>\n  );\n}\n","import React from \"react\";\n\n//reverts all state back to the additional starting values\n\nexport function ResetBtn({ setAmount, setClientObject, setNpsResult }) {\n  const handleReset = () => {\n    setAmount(\"\");\n    setClientObject([\n      { name: \"\", pubShare: 0, syncRate: 0, id: new Date().valueOf() },\n    ]);\n    setNpsResult(\"\");\n  };\n  return (\n    <div className=\"center\">\n      <button onClick={handleReset} className=\"btn btnReset\">\n        Reset\n      </button>\n    </div>\n  );\n}\n","import React from \"react\";\n\n//adds and additional client object to the clientObject state\n\nexport function AddClientBtn({ clientObject, setClientObject }) {\n  const onClickHandler = (e) => {\n    e.preventDefault();\n    setClientObject([\n      ...clientObject,\n      { name: \"\", pubShare: 0, syncRate: 0, id: new Date().valueOf() },\n    ]);\n  };\n\n  return (\n    <div className=\"center\">\n      <button onClick={onClickHandler} className=\"btn btnClient\">\n        Add Client\n      </button>\n    </div>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\n//Styles\nimport \"./App.css\";\n\n//Components\nimport { Amount } from \"./components/Amount\";\nimport { ClientList } from \"./components/ClientList\";\nimport { Result } from \"./components/Result\";\nimport { ResetBtn } from \"./components/buttons/ResetBtn\";\nimport { AddClientBtn } from \"./components/buttons/AddClientBtn\";\n\nfunction App() {\n  //state\n  const [clientObject, setClientObject] = useState([\n    { name: \"\", pubShare: 0, syncRate: 0, id: new Date().valueOf() },\n  ]);\n  const [amount, setAmount] = useState(\"\");\n  const [npsResult, setNpsResult] = useState(\"\");\n  const [copyFade, setCopyFade] = useState(\"\");\n  const [darkMode, setDarkMode] = useState(false);\n\n  //function to convert stringed numbers to floats and round to 2dp\n  const rounded = (num) => {\n    const numConv = parseFloat(num);\n    return Math.round((numConv + Number.EPSILON) * 100) / 100;\n  };\n\n  //function to remove commas from the 'amount state' and convert to a float\n  const convertAmount = (a) => {\n    const removeC = a.replaceAll(\",\", \"\");\n    return parseFloat(removeC);\n  };\n\n  //main function which calcualtes nps if conditions are met\n  useEffect(() => {\n    const reducer = (accumulator, curr) => accumulator + curr;\n    const shareArr = clientObject.map((i) => i.pubShare);\n    const shareTotal = shareArr.reduce(reducer);\n\n    // check rate is higher than 0% but does not exceed 100%\n    const rateCheck = clientObject.every(\n      (i) => i.syncRate !== 0 && i.syncRate > 0 && i.syncRate <= 1\n    );\n\n    // calcualte nps only if the amount has been entered, shares total 100% and rates are valid\n    if (amount === \"\" || shareTotal !== 1 || !rateCheck) {\n      setNpsResult(\"\");\n    } else {\n      const convertedAmount = convertAmount(amount);\n      const npsArray = clientObject.map(\n        (i) => convertedAmount * i.pubShare * (1 - i.syncRate)\n      );\n      const nps = npsArray.reduce(reducer);\n      const npsRounded = rounded(nps);\n      const npsToLocaleString = npsRounded.toLocaleString();\n      setNpsResult(npsToLocaleString);\n    }\n  }, [amount, clientObject]);\n\n  //function to switch theme to dark mode\n  const handleDarkMode = () => {\n    if (darkMode) {\n      document.body.style.backgroundColor = \"white\";\n      document.querySelector(\".result\").style.color = \"black\";\n      setDarkMode(false);\n    } else {\n      document.body.style.backgroundColor = \"#101010\";\n      document.querySelector(\".result\").style.color = \"white\";\n      setDarkMode(true);\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"center\">\n        <h1 onClick={handleDarkMode} className=\"title\">\n          NPS Calculator\n        </h1>\n      </div>\n\n      <Amount amount={amount} setAmount={setAmount} />\n      <ClientList\n        clientObject={clientObject}\n        setClientObject={setClientObject}\n      />\n\n      <AddClientBtn\n        clientObject={clientObject}\n        setClientObject={setClientObject}\n      />\n      <p className=\"resultTitle\">Result:</p>\n      <Result\n        npsResult={npsResult}\n        clientObject={clientObject}\n        amount={amount}\n        rounded={rounded}\n        convertAmount={convertAmount}\n        copyFade={copyFade}\n        setCopyFade={setCopyFade}\n        darkMode={darkMode}\n      />\n      <ResetBtn\n        setAmount={setAmount}\n        setClientObject={setClientObject}\n        setNpsResult={setNpsResult}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}